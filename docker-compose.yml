volumes:
  pg-db-data:
    driver: local
  pg-admin-data:
    driver: local

networks:
  pg-network:
    driver: bridge

services:
    # Production build base
    base: &base
        hostname: app
        image: python-template:production
        build:
          context: .
          dockerfile: Dockerfile
        environment: &env
            ENV: "dev"
            LOG_LEVEL: "DEBUG"
            DB_URL: "postgresql+asyncpg://postgres:passwd@pg-db:5432/app_dev"
            PYTHONDONTWRITEBYTECODE: 1
        depends_on:
          pg-db:
            condition: service_healthy

    # Development build base (with dev dependencies and hot reload)
    dev-base: &dev-base
        hostname: app-dev
        image: python-template:development
        build:
          context: .
          dockerfile: Dockerfile.dev
        working_dir: /app
        volumes:
          - ./:/app
        environment: *env
        depends_on:
          pg-db:
            condition: service_healthy

    # Production app (optimized image)
    app:
        <<: *base
        command: /bin/sh -c "alembic upgrade head && python -m app"
        ports:
          - "8080:8080"
        networks:
          - pg-network

    # Development app (with hot reload)
    app-dev:
        <<: *dev-base
        command: /bin/sh -c "alembic upgrade head && python -m app"
        ports:
          - "8080:8080"
        networks:
          - pg-network

    # Testing services (use dev image with all dependencies)
    tests:
        <<: *dev-base
        command: /bin/sh -c "pytest tests/"
        environment:
          <<: *env
          ENV: "test"
          DB_URL: "postgresql+asyncpg://postgres:passwd@pg-db:5432/app_test"
        networks:
          - pg-network

    # Watch mode services (use dev image for fast feedback)
    watch:
        <<: *dev-base
        command: /bin/sh -c "ptw -w -c tests/"
        environment:
          <<: *env
          ENV: "test"
          DB_URL: "postgresql+asyncpg://postgres:passwd@pg-db:5432/app_test"
        networks:
          - pg-network

    watch-unit:
        <<: *dev-base
        command: /bin/sh -c "ptw -w -c tests/unit/"
        environment:
          <<: *env
          ENV: "test"
          DB_URL: "postgresql+asyncpg://postgres:passwd@pg-db:5432/app_test"
        networks:
          - pg-network

    watch-integration:
        <<: *dev-base
        command: /bin/sh -c "ptw -w -c tests/integration/"
        environment:
          <<: *env
          ENV: "test"
          DB_URL: "postgresql+asyncpg://postgres:passwd@pg-db:5432/app_test"
        networks:
          - pg-network

    pg-db:
        hostname: pg-db
        image: postgres:15.2-alpine
        environment:
          POSTGRES_PASSWORD: "passwd"
        ports:
          - "5432:5432"
        volumes:
          - ./scripts/pg:/docker-entrypoint-initdb.d
          - pg-db-data:/var/lib/postgresql/data
        networks:
          - pg-network
        healthcheck:
          test: ["CMD-SHELL", "pg_isready"]
          interval: 5s
          timeout: 3s
          retries: 5

    pg-admin:
        hostname: pg-admin
        image: dpage/pgadmin4
        environment:
          PGADMIN_DEFAULT_EMAIL: "local@dev.com"
          PGADMIN_DEFAULT_PASSWORD: "passwd"
        ports:
          - "6001:80"
        volumes:
          - pg-admin-data:/var/lib/pgadmin
        depends_on:
          - pg-db
        networks:
          - pg-network
